{"version":3,"sources":["components/Footer/index.js","components/Footer/Footer.js","components/Nav/Nav.js","components/Nav/index.js","pages/About/index.js","pages/About/About.js","components/Header/index.js","components/Header/Header.js","pages/Home/index.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Footer","NavLink","link","currentLocation","path","text","isActive","className","classNames","to","Nav","links","location","useLocation","map","key","uuid","pathname","About","Header","children","Home","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAEeA,G,kBCAA,kBACb,oD,+CCMIC,EAAU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACfC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KACRC,EAAWH,IAAoBC,EAC/BG,EAAYC,IAAW,YAAa,CACxC,CAAE,qBAAsBF,KAG1B,OACE,kBAAC,IAAD,CAAMC,UAAWA,EAAWE,GAAIL,GAC7BC,IChBQK,EDqBH,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EAAWC,cACjB,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,aACXI,EAAMG,KAAI,SAACZ,GAAD,OACT,wBAAIa,IAAKC,eACP,kBAAC,EAAD,CAASd,KAAMA,EAAMC,gBAAiBS,EAASK,mBE7B9CC,ECAD,kBACZ,qDCDaC,G,MCEA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,gCAASA,KCF3BC,ECCF,kBACX,oCACE,kBAAC,EAAD,iBACA,kDCMEV,EAAQ,CACZ,CAAEP,KAAM,IAAKC,KAAM,QACnB,CAAED,KAAM,SAAUC,KAAM,UAsBXiB,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAKI,MAAOA,IACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,QAGJ,kBAAC,EAAD,SClBYmB,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1b3e1ff.chunk.js","sourcesContent":["import Footer from './Footer';\n\nexport default Footer;","import React from 'react';\n\nconst Footer = () => (\n  <footer>\n    Footer content\n  </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { v4 as uuid } from \"uuid\";\n\nimport \"./Nav.css\";\n\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst NavLink = ({ link, currentLocation }) => {\n  const { path, text } = link;\n  const isActive = currentLocation === path;\n  const className = classNames(\"nav__link\", [\n    { \"nav__link--current\": isActive },\n  ]);\n\n  return (\n    <Link className={className} to={path}>\n      {text}\n    </Link>\n  );\n};\n\nconst Nav = ({ links }) => {\n  const location = useLocation();\n  return (\n    <nav className=\"nav\">\n      <div className=\"nav__list-container\">\n        <ul className=\"nav__list\">\n          {links.map((link) => (\n            <li key={uuid()}>\n              <NavLink link={link} currentLocation={location.pathname} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nNav.propTypes = {\n  links: PropTypes.array.isRequired,\n};\n\nNavLink.propTypes = {\n  link: PropTypes.object.isRequired,\n  current: PropTypes.string.isRequired,\n};\n\nexport default Nav;\n","import Nav from './Nav';\n\nexport default Nav;","import About from './About';\n\nexport default About;","import React from 'react';\n\nconst About = () => (\n  <main>\n    About page content\n  </main>\n);\n\nexport default About;","import Header from './Header';\n\nexport default Header;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Header.css\";\n\nconst Header = ({ children }) => <header>{children}</header>;\n\nHeader.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n};\n\nexport default Header;\n","import Home from './Home';\n\nexport default Home;","import React from \"react\";\nimport Header from \"components/Header\";\n\nconst Home = () => (\n  <>\n    <Header>Welcome!</Header>\n    <main>Home page Main</main>\n  </>\n);\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"styles/styles.css\";\n\nimport Footer from \"components/Footer\";\nimport Nav from \"components/Nav\";\n\nimport About from \"pages/About\";\nimport Home from \"pages/Home\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst links = [\n  { path: \"/\", text: \"Home\" },\n  { path: \"/about\", text: \"About\" },\n];\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Nav links={links} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}